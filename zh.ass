[Script Info]
; Script generated by FFmpeg/Lavc58.18.100
ScriptType: v4.00+
PlayResX: 384
PlayResY: 288

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,1,1,0,2,10,10,10,0

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:07.07,0:00:09.32,Default,,0,0,0,,大家好。
Dialogue: 0,0:00:09.32,0:00:12.22,Default,,0,0,0,,我是来自 Brain Robotics 团队的 Alex，
Dialogue: 0,0:00:12.22,0:00:15.79,Default,,0,0,0,,在本演示中，我将谈论我们如何在一些
Dialogue: 0,0:00:15.79,0:00:19.72,Default,,0,0,0,,现实世界中的机器人学习问题中\N使用模拟和域适应。
Dialogue: 0,0:00:20.62,0:00:24.46,Default,,0,0,0,,所以，首先让我开始介绍机器人学习。
Dialogue: 0,0:00:24.46,0:00:28.04,Default,,0,0,0,,机器人学习的目标是使用机器学习
Dialogue: 0,0:00:28.04,0:00:31.79,Default,,0,0,0,,来学习在一般环境中能运作的机器人技能。
Dialogue: 0,0:00:32.00,0:00:33.93,Default,,0,0,0,,到目前为止，我们看到的是，
Dialogue: 0,0:00:33.92,0:00:35.73,Default,,0,0,0,,如果你常常控制你的环境，
Dialogue: 0,0:00:35.73,0:00:38.63,Default,,0,0,0,,你可以让机器人做出很厉害的事情，
Dialogue: 0,0:00:38.63,0:00:40.16,Default,,0,0,0,,而技术开始崩溃的地方
Dialogue: 0,0:00:40.17,0:00:42.79,Default,,0,0,0,,是当你尝试将这些相同的技术应用
Dialogue: 0,0:00:42.79,0:00:44.65,Default,,0,0,0,,到更一般的环境时。
Dialogue: 0,0:00:44.65,0:00:47.21,Default,,0,0,0,,他们的思想是，如果你使用机器学习，
Dialogue: 0,0:00:47.21,0:00:48.93,Default,,0,0,0,,那么你可以从你的环境中学习，
Dialogue: 0,0:00:48.93,0:00:52.34,Default,,0,0,0,,这可以帮助你解决这些泛化问题。
Dialogue: 0,0:00:52.34,0:00:54.16,Default,,0,0,0,,所以，作为朝这个方向迈出的一步，
Dialogue: 0,0:00:54.16,0:00:57.28,Default,,0,0,0,,我们一直在关注机器人抓取的问题。
Dialogue: 0,0:00:57.28,0:01:01.52,Default,,0,0,0,,这是我们一直在与X的一些人合作的一个项目。
Dialogue: 0,0:01:01.78,0:01:03.78,Default,,0,0,0,,为了解释我们的问题设置，
Dialogue: 0,0:01:03.78,0:01:05.55,Default,,0,0,0,,我们将有一个真正的机器人手臂，
Dialogue: 0,0:01:05.55,0:01:08.62,Default,,0,0,0,,它正在学习从垃圾箱中拾取物体。
Dialogue: 0,0:01:08.62,0:01:11.65,Default,,0,0,0,,将会有一台摄像机俯视
Dialogue: 0,0:01:11.66,0:01:14.33,Default,,0,0,0,,手臂的肩膀进入垃圾箱，
Dialogue: 0,0:01:14.33,0:01:17.77,Default,,0,0,0,,从这张 RGB 图像中，我们将训练一个神经网络，
Dialogue: 0,0:01:17.76,0:01:20.56,Default,,0,0,0,,以了解它应该发送给机器人的命令
Dialogue: 0,0:01:20.56,0:01:22.93,Default,,0,0,0,,以成功拾取物体。
Dialogue: 0,0:01:22.92,0:01:27.26,Default,,0,0,0,,现在，我们想尽量使用尽可能少的假设来解决这个任务。
Dialogue: 0,0:01:27.27,0:01:30.20,Default,,0,0,0,,所以，重要的是，我们不会提供
Dialogue: 0,0:01:30.20,0:01:33.50,Default,,0,0,0,,关于我们想要拾取什么类型的物体的任何信息，
Dialogue: 0,0:01:33.50,0:01:35.05,Default,,0,0,0,,我们也不会提供
Dialogue: 0,0:01:35.05,0:01:38.24,Default,,0,0,0,,有关场景深度的任何信息。
Dialogue: 0,0:01:38.24,0:01:40.37,Default,,0,0,0,,所以为了解决这个任务，
Dialogue: 0,0:01:40.37,0:01:42.57,Default,,0,0,0,,模型需要学习手眼协调，
Dialogue: 0,0:01:42.58,0:01:45.22,Default,,0,0,0,,或者需要知道它在摄像机图像中的位置，
Dialogue: 0,0:01:45.21,0:01:48.01,Default,,0,0,0,,然后找出它在场景中的位置，
Dialogue: 0,0:01:48.02,0:01:50.73,Default,,0,0,0,,然后结合这两者来弄清楚它应该如何移动。
Dialogue: 0,0:01:51.87,0:01:55.51,Default,,0,0,0,,现在，为了训练这个模型，\N我们将需要大量的数据，
Dialogue: 0,0:01:55.51,0:01:57.67,Default,,0,0,0,,因为它是一个相当大规模的图像模型。
Dialogue: 0,0:01:57.67,0:02:02.83,Default,,0,0,0,,而我们当时的解决方案是使用更多的机器人。
Dialogue: 0,0:02:02.82,0:02:05.56,Default,,0,0,0,,所以这就是我们所说的“手臂农场”。
Dialogue: 0,0:02:05.56,0:02:08.69,Default,,0,0,0,,有六台机器人并行采集数据。
Dialogue: 0,0:02:08.69,0:02:11.55,Default,,0,0,0,,如果你有六个机器人，你可以更快地收集数据。
Dialogue: 0,0:02:11.55,0:02:13.26,Default,,0,0,0,,如果跟只有一个机器人相比。
Dialogue: 0,0:02:13.26,0:02:20.72,Default,,0,0,0,,因此，使用这些机器人，我们能够在数千个\N机器人小时内收集超过一百万次抓握的尝试，
Dialogue: 0,0:02:20.92,0:02:22.67,Default,,0,0,0,,然后使用这些数据，我们能够
Dialogue: 0,0:02:22.67,0:02:26.60,Default,,0,0,0,,成功地训练模型学习如何拾取物体。
Dialogue: 0,0:02:26.60,0:02:29.40,Default,,0,0,0,,这是可行，但仍需要很长时间
Dialogue: 0,0:02:29.41,0:02:31.04,Default,,0,0,0,,才能收集此数据集。
Dialogue: 0,0:02:31.04,0:02:33.04,Default,,0,0,0,,因此，这一点激励我们寻找方法
Dialogue: 0,0:02:33.04,0:02:38.86,Default,,0,0,0,,减少学习这些行为所需的实际数据量。
Dialogue: 0,0:02:38.99,0:02:41.66,Default,,0,0,0,,一种做法是模拟。
Dialogue: 0,0:02:41.66,0:02:43.32,Default,,0,0,0,,因此，在左侧视频中，
Dialogue: 0,0:02:43.31,0:02:47.53,Default,,0,0,0,,你可以看到在我们的真实世界设置中\N进入我们模型的图像，
Dialogue: 0,0:02:47.78,0:02:49.78,Default,,0,0,0,,而在右侧，你可以看到
Dialogue: 0,0:02:49.79,0:02:52.71,Default,,0,0,0,,我们模拟该设置的重新创建。
Dialogue: 0,0:02:52.70,0:02:55.22,Default,,0,0,0,,现在，将事物转化为模拟的优势在于
Dialogue: 0,0:02:55.22,0:02:58.32,Default,,0,0,0,,模拟机器人更容易扩展。
Dialogue: 0,0:02:58.33,0:03:01.46,Default,,0,0,0,,我们已经能够旋转数以千计的模拟机器人，
Dialogue: 0,0:03:01.46,0:03:03.33,Default,,0,0,0,,它们会抓住各种物体
Dialogue: 0,0:03:03.33,0:03:07.91,Default,,0,0,0,,使用这种设置，我们能够在短短八个多小时内\N收集数百万的抓握，
Dialogue: 0,0:03:08.13,0:03:11.01,Default,,0,0,0,,而不是原始数据集所需的几周。
Dialogue: 0,0:03:12.84,0:03:15.94,Default,,0,0,0,,这对于获取大量数据非常有用，
Dialogue: 0,0:03:15.93,0:03:18.53,Default,,0,0,0,,但不幸的是，模拟培训的模型
Dialogue: 0,0:03:18.54,0:03:21.76,Default,,0,0,0,,往往不会转移到真实世界的机器人。
Dialogue: 0,0:03:21.75,0:03:24.71,Default,,0,0,0,,两者之间存在很多系统性差异。
Dialogue: 0,0:03:24.71,0:03:28.02,Default,,0,0,0,,其中一件大事是不同事物的视觉外观。
Dialogue: 0,0:03:28.02,0:03:34.06,Default,,0,0,0,,而另一个重要的就是我们现实世界的物理学和\N我们的模拟物理学之间的物理差异。
Dialogue: 0,0:03:34.18,0:03:37.18,Default,,0,0,0,,所以我们所做的就是，我们能够快速
Dialogue: 0,0:03:37.18,0:03:41.38,Default,,0,0,0,,训练我们的模拟模型，以获得大约90％的抓握成功。
Dialogue: 0,0:03:41.38,0:03:43.65,Default,,0,0,0,,然后，我们部署到真正的机器人上，
Dialogue: 0,0:03:43.65,0:03:46.40,Default,,0,0,0,,它的成功率超过20％，
Dialogue: 0,0:03:46.40,0:03:48.42,Default,,0,0,0,,这是一个非常大的性能下降。
Dialogue: 0,0:03:49.04,0:03:51.52,Default,,0,0,0,,所以为了获得好的表现，
Dialogue: 0,0:03:51.52,0:03:53.84,Default,,0,0,0,,我们的做法需要更聪明一些。
Dialogue: 0,0:03:53.84,0:03:56.69,Default,,0,0,0,,所以这个动机考虑了模拟 - 到-现实的转换，
Dialogue: 0,0:03:56.69,0:03:59.36,Default,,0,0,0,,这是一组转换学习技术，
Dialogue: 0,0:03:59.36,0:04:01.26,Default,,0,0,0,,用于尝试使用模拟数据
Dialogue: 0,0:04:01.26,0:04:04.50,Default,,0,0,0,,来提高你的实际样本效率。
Dialogue: 0,0:04:06.55,0:04:09.97,Default,,0,0,0,,有几种不同的方法可以做到这一点。
Dialogue: 0,0:04:09.97,0:04:11.64,Default,,0,0,0,,这样做的一种方法是在
Dialogue: 0,0:04:11.63,0:04:14.03,Default,,0,0,0,,你的模拟器中增加更多的随机化。
Dialogue: 0,0:04:14.04,0:04:17.93,Default,,0,0,0,,你可以通过更改应用于不同物体的纹理，
Dialogue: 0,0:04:17.98,0:04:19.95,Default,,0,0,0,,改变其颜色，
Dialogue: 0,0:04:19.95,0:04:22.94,Default,,0,0,0,,改变灯光与场景的交互方式，
Dialogue: 0,0:04:22.95,0:04:28.36,Default,,0,0,0,,以及改变所要尝试捡起的物体的\N几何形状来实现这一点。
Dialogue: 0,0:04:28.57,0:04:31.95,Default,,0,0,0,,另一种方法是领域适应，
Dialogue: 0,0:04:31.95,0:04:34.26,Default,,0,0,0,,这是一组学习技术，
Dialogue: 0,0:04:34.25,0:04:38.12,Default,,0,0,0,,这适用于当你有一些共同的结构的两个数据领域，
Dialogue: 0,0:04:38.12,0:04:39.86,Default,,0,0,0,,但仍然有些不同。
Dialogue: 0,0:04:39.86,0:04:42.73,Default,,0,0,0,,在我们的情况下，这两个领域将是\N我们的模拟机器人数据
Dialogue: 0,0:04:42.73,0:04:45.30,Default,,0,0,0,,和我们的真实机器人数据。
Dialogue: 0,0:04:45.30,0:04:47.45,Default,,0,0,0,,还有一些功能级别的方法可以做到这一点，
Dialogue: 0,0:04:47.46,0:04:49.83,Default,,0,0,0,,并且也有像素级别的方法可以做到这一点。
Dialogue: 0,0:04:49.83,0:04:53.14,Default,,0,0,0,,现在，在这项工作中，\N我们尝试了所有这些方法，
Dialogue: 0,0:04:53.13,0:04:55.67,Default,,0,0,0,,并且在本演示中，我将首先关注
Dialogue: 0,0:04:55.68,0:04:58.12,Default,,0,0,0,,领域适应这方面。
Dialogue: 0,0:05:00.50,0:05:02.93,Default,,0,0,0,,因此，在特征级别领域培训中，
Dialogue: 0,0:05:02.94,0:05:06.44,Default,,0,0,0,,我们要做的是我们将采用我们的模拟数据，
Dialogue: 0,0:05:06.44,0:05:07.81,Default,,0,0,0,,拿出我们的真实数据，
Dialogue: 0,0:05:07.80,0:05:10.67,Default,,0,0,0,,在两个数据集上训练相同的模型，
Dialogue: 0,0:05:10.67,0:05:13.11,Default,,0,0,0,,然后在网络的中间特征层，
Dialogue: 0,0:05:13.11,0:05:15.65,Default,,0,0,0,,我们将附上相似性损失。
Dialogue: 0,0:05:15.65,0:05:19.49,Default,,0,0,0,,而相似性损失将会促使特征的分布
Dialogue: 0,0:05:19.48,0:05:21.53,Default,,0,0,0,,在整个领域变得相同。
Dialogue: 0,0:05:21.53,0:05:24.94,Default,,0,0,0,,一种很好的方法
Dialogue: 0,0:05:24.94,0:05:27.76,Default,,0,0,0,,被称之为领域 - 对抗神经网络。
Dialogue: 0,0:05:27.76,0:05:31.43,Default,,0,0,0,,它的运作的方式是将相似性损失
Dialogue: 0,0:05:31.42,0:05:37.24,Default,,0,0,0,,作为一个小型的神经网络来实现，\N它试图根据它所接收到的输入特征来预测领域，
Dialogue: 0,0:05:37.41,0:05:39.12,Default,,0,0,0,,然后其余的模型试图尽可能地
Dialogue: 0,0:05:39.12,0:05:42.24,Default,,0,0,0,,混淆这个领域分类器。
Dialogue: 0,0:05:44.67,0:05:49.55,Default,,0,0,0,,像素级别的方法尝试从不同的角度解决问题。
Dialogue: 0,0:05:49.70,0:05:57.34,Default,,0,0,0,,我们尝试让像素级别的图像看起来更逼真，\N而不是试图学习领域不变特征
Dialogue: 0,0:05:57.51,0:06:01.08,Default,,0,0,0,,所以我们在这里的做法是我们采取一个生成对抗网络;
Dialogue: 0,0:06:01.07,0:06:04.77,Default,,0,0,0,,我们从模拟器中提供一张图像，
Dialogue: 0,0:06:04.78,0:06:08.58,Default,,0,0,0,,然后输出看起来更逼真的图像。
Dialogue: 0,0:06:08.58,0:06:11.52,Default,,0,0,0,,然后我们将使用这个生成器的输出
Dialogue: 0,0:06:11.51,0:06:15.41,Default,,0,0,0,,来训练我们想要训练的任何任务模型。
Dialogue: 0,0:06:15.41,0:06:16.95,Default,,0,0,0,,现在我们要同时训练
Dialogue: 0,0:06:16.95,0:06:19.35,Default,,0,0,0,,发电机和任务模型。
Dialogue: 0,0:06:19.35,0:06:21.38,Default,,0,0,0,,我们发现在实践中，这很有用，
Dialogue: 0,0:06:21.39,0:06:23.82,Default,,0,0,0,,因为它有助于将发电机输出信号
Dialogue: 0,0:06:23.82,0:06:27.08,Default,,0,0,0,,用于实际训练下游任务。
Dialogue: 0,0:06:29.23,0:06:31.93,Default,,0,0,0,,好的。退一步说，
Dialogue: 0,0:06:31.93,0:06:39.99,Default,,0,0,0,,功能级别的方法可以在你有不完全相同的\N相关领域的数据时学习域不变特征。
Dialogue: 0,0:06:40.27,0:06:43.60,Default,,0,0,0,,同时，像素级方法可以将数据
Dialogue: 0,0:06:43.60,0:06:46.40,Default,,0,0,0,,转换为更接近真实世界的数据，
Dialogue: 0,0:06:46.40,0:06:48.14,Default,,0,0,0,,但实际上它们的运作不是完美的，
Dialogue: 0,0:06:48.14,0:06:52.34,Default,,0,0,0,,并且发生器输出中仍然存在\N一些小的瑕疵和不准确性。
Dialogue: 0,0:06:52.74,0:06:56.71,Default,,0,0,0,,所以我们的想法是，\N“为什么我们不把这两种方法结合起来？”
Dialogue: 0,0:06:56.71,0:06:59.19,Default,,0,0,0,,我们可以应用像素级别的方法
Dialogue: 0,0:06:59.19,0:07:01.91,Default,,0,0,0,,尽可能多地转换数据，
Dialogue: 0,0:07:01.91,0:07:04.25,Default,,0,0,0,,但这不会让我们一路畅通无阻，
Dialogue: 0,0:07:04.25,0:07:06.95,Default,,0,0,0,,但是随后可以在此基础上附加\N一个功能级别的方法，
Dialogue: 0,0:07:06.95,0:07:09.91,Default,,0,0,0,,以尝试进一步缩小现实的差距，
Dialogue: 0,0:07:09.92,0:07:12.51,Default,,0,0,0,,并将这些形式组合在一起，\N形成我们所说的抓取 gen，
Dialogue: 0,0:07:12.51,0:07:16.15,Default,,0,0,0,,它是像素级和特征级域适应的组合。
Dialogue: 0,0:07:16.22,0:07:18.26,Default,,0,0,0,,在这视频的左半部分，
Dialogue: 0,0:07:18.26,0:07:19.86,Default,,0,0,0,,你可以看到一个模拟的抓握。
Dialogue: 0,0:07:19.86,0:07:22.86,Default,,0,0,0,,在右半边你可以看到我们的发电机的输出。
Dialogue: 0,0:07:22.86,0:07:25.23,Default,,0,0,0,,你可以看到它正在学习一些非常酷的东西，
Dialogue: 0,0:07:25.23,0:07:27.73,Default,,0,0,0,,从绘制托盘应该看起来的样子，
Dialogue: 0,0:07:27.73,0:07:30.33,Default,,0,0,0,,在手臂上绘制更逼真的纹理，
Dialogue: 0,0:07:30.33,0:07:32.23,Default,,0,0,0,,绘制物体正在投射的阴影。
Dialogue: 0,0:07:32.24,0:07:36.37,Default,,0,0,0,,它还学会了当手臂在场景中移动时，\N如何在手臂上绘制阴影。
Dialogue: 0,0:07:36.44,0:07:38.41,Default,,0,0,0,,它当然不是完美的。
Dialogue: 0,0:07:38.40,0:07:41.80,Default,,0,0,0,,在周围仍然有些奇怪的颜色斑点，
Dialogue: 0,0:07:41.81,0:07:46.96,Default,,0,0,0,,但它肯定是在学习一些有关\N如何让图像看起来更真实的东西。
Dialogue: 0,0:07:47.03,0:07:51.15,Default,,0,0,0,,这对于获得大量漂亮的图像是很好的，
Dialogue: 0,0:07:51.15,0:07:54.82,Default,,0,0,0,,但是对于我们的问题而言，\N重要的是这些图像是否真的有用于
Dialogue: 0,0:07:54.81,0:07:58.30,Default,,0,0,0,,将它们减少到所需的实际数据。
Dialogue: 0,0:07:58.96,0:08:01.42,Default,,0,0,0,,我们发现它的确可以。
Dialogue: 0,0:08:01.42,0:08:03.39,Default,,0,0,0,,因此，稍微解释一下这个图表：
Dialogue: 0,0:08:03.39,0:08:07.14,Default,,0,0,0,,在x轴上是所使用的实际样本的数量，
Dialogue: 0,0:08:07.14,0:08:09.65,Default,,0,0,0,,并且我们比较了不同方法的性能，
Dialogue: 0,0:08:09.65,0:08:13.06,Default,,0,0,0,,在我们将它们改变为给模型提供的\N实际数据的同时我们这么做了。
Dialogue: 0,0:08:13.06,0:08:16.73,Default,,0,0,0,,当我们只使用模拟数据时，蓝条是我们的表现。
Dialogue: 0,0:08:16.73,0:08:20.13,Default,,0,0,0,,红色条是我们使用真实数据时的表现，
Dialogue: 0,0:08:20.13,0:08:24.30,Default,,0,0,0,,橙色条是我们使用模拟和真实数据
Dialogue: 0,0:08:24.30,0:08:27.67,Default,,0,0,0,,以及我一直在谈论的领域适应方法时的表现。
Dialogue: 0,0:08:27.67,0:08:32.74,Default,,0,0,0,,我们发现当我们仅使用\N原始真实世界数据集的2％时，
Dialogue: 0,0:08:32.80,0:08:35.47,Default,,0,0,0,,并且我们将领域适应应用于它，
Dialogue: 0,0:08:35.47,0:08:37.70,Default,,0,0,0,,我们能够获得相同的性能水平，
Dialogue: 0,0:08:37.70,0:08:41.24,Default,,0,0,0,,因此这减少了真实世界所需的样本数量
Dialogue: 0,0:08:41.24,0:08:43.37,Default,,0,0,0,,减少了50次，
Dialogue: 0,0:08:43.37,0:08:48.41,Default,,0,0,0,,这对于不需要大量时间运作机器人\N来学习这些抓握行为而言非常令人兴奋。
Dialogue: 0,0:08:48.75,0:08:52.15,Default,,0,0,0,,此外，我们发现，即使我们将
Dialogue: 0,0:08:52.15,0:08:54.65,Default,,0,0,0,,所有真实世界的数据都提供给模型，
Dialogue: 0,0:08:54.65,0:08:56.58,Default,,0,0,0,,当我们也提供模拟数据时，
Dialogue: 0,0:08:56.59,0:08:59.06,Default,,0,0,0,,我们仍然能够看到性能的进步，
Dialogue: 0,0:08:59.06,0:09:03.32,Default,,0,0,0,,这意味着我们在这个抓握问题上\N尚未达到数据容量限制。
Dialogue: 0,0:09:03.82,0:09:09.71,Default,,0,0,0,,最后，有一种方法可以在\N没有真实世界标签的情况下训练此设置，
Dialogue: 0,0:09:09.86,0:09:11.76,Default,,0,0,0,,当我们在此环境中训练模型时，
Dialogue: 0,0:09:11.76,0:09:16.89,Default,,0,0,0,,我们发现我们仍然能够在现实世界的机器人上\N获得相当不错的性能。
Dialogue: 0,0:09:19.09,0:09:23.97,Default,,0,0,0,,现在，这是 X 和 Brain 大型团队的工作成果。
Dialogue: 0,0:09:24.17,0:09:26.41,Default,,0,0,0,,我要感谢与我合作的所有人。
Dialogue: 0,0:09:26.41,0:09:28.65,Default,,0,0,0,,这是原始文件的链接。
Dialogue: 0,0:09:28.64,0:09:34.26,Default,,0,0,0,,如果人们有兴趣了解更多的细节，\N可以看看所提供的一篇博文。
Dialogue: 0,0:09:34.57,0:09:35.68,Default,,0,0,0,,谢谢。
